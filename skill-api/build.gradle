buildscript {
    dependencies {
        classpath group: 'com.anatawa12.forge', name: 'ForgeGradle', version: '1.2-1.0.+', changing: true
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'forge'

version = "0.1-SNAPSHOT"
archivesBaseName = "SkillAPI"
group = GROUP

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.7.10-10.13.4.1558-1.7.10"
    runDir = "minecraft"
}

ext {
    jacksonVersion = '2.6.7'
    lombokVersion = '1.18.22'
    cglibVersion = '3.2.1'
}

dependencies {
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
//    annotationProcessor project(':skill-processor')

    implementation group: 'cglib', name: 'cglib', version: cglibVersion

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
}

runClient {
    args '--username', 'Junzzzz'
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include("*.png", "*.lang")
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    // Keep the jar as clean as possible
    includeEmptyDirs = false
    destinationDirectory = file("$rootDir/build")
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.encoding = 'UTF-8'
}

javadocJar {
    destinationDirectory = file("$rootDir/build")
}

sourcesJar {
    destinationDirectory = file("$rootDir/build")
}

// Maven Publish
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = MOD_ID
            version = project.version

            artifact jar
            artifact javadocJar
            artifact sourcesJar

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? SNAPSHOTS_REPO_URL : RELEASE_REPO_URL
            name = "Sonatype-Nexus"
            credentials {
                username System.getenv("OSSRH_USERNAME")
                password System.getenv("OSSRH_PASSWORD")
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv("SIGN_ID")
    def signingKey = System.getenv("SIGN_KEY")
    def signingPassword = System.getenv("SIGN_PWD")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}